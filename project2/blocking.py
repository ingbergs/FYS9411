from numpy import log2, zeros, mean, var, sum, loadtxt, arange, array, cumsum, dot, transpose, diagonal, floor, setdiff1d
from numpy.linalg import inv
from time import time
import matplotlib.pyplot as plt #??????????????????????????????????????????????????????????????????????????????
import os, sys


fileName = 'Elist_eta(1.0)_importance.txt'
os.system('cmd /c "python CleanerOfNan.py" ' +str(fileName))


def block(x):
    # preliminaries
    n = len(x)
    d = int(log2(n))
    s, gamma = zeros(d), zeros(d)
    mu = mean(x)
    t0 = time()

    #plot_means = [] #??????????????????????????????????????????????????????????????????????????????
    #plot_means.append(x) #??????????????????????????????????????????????????????????????????????????????


    # estimate the auto-covariance and variances
    # for each blocking transformation
    for i in arange(0,d):
        n = len(x)
        if n%2 != 0:
            n -= 1
        print(n)
        # estimate autocovariance of x
        gamma[i] = (n)**(-1)*sum( (x[0:(n-1)]-mu)*(x[1:n]-mu) )
        # estimate variance of x
        s[i] = var(x)
        # perform blocking transformation
        x = 0.5*(x[0:n:2] + x[1:n:2])
        #plot_means.append(x) #??????????????????????????????????????????????????????????????????????????????


    # generate the test observator M_k from the theorem
    M = (cumsum( ((gamma/s)**2*2**arange(1,d+1)[::-1])[::-1] )  )[::-1]

    # we need a list of magic numbers
    q =array([6.634897,9.210340, 11.344867, 13.276704, 15.086272, 16.811894, 18.475307, 20.090235, 21.665994, 23.209251, 24.724970, 26.216967, 27.688250, 29.141238, 30.577914, 31.999927, 33.408664, 34.805306, 36.190869, 37.566235, 38.932173, 40.289360, 41.638398, 42.979820, 44.314105, 45.641683, 46.962942, 48.278236, 49.587884, 50.892181])

    # use magic to determine when we should have stopped blocking
    for k in arange(0,d):
        if(M[k] < q[k]):
            break
    print('k:', k)
    if (k >= d-1):
        print("Warning: Use more data")
    ans = s[k]/2**(d-k)
    print("Runtime: %g sec" % (time()-t0)); print("Blocking Statistics :")
    print("average            iterations      std. error")
    print("%8g %20g %15g" % (mu, k, ans**.5))
    return ans, s, mu
    #return ans, plot_means #??????????????????????????????????????????????????????????????????????????????

# input data must be a power of two


          

x = loadtxt(fileName + '_clean.txt')



d = int(log2(len(x))) #?????????????????????????????????

ans, s, mu = block(x)


plt.plot(mu - s/2**d)
plt.show()


"""
#ans, plot_means = block(x) #??????????????????????????????????????????????????????????????????????????????

#?????????????????????????????????????????????????????????????????????????????? resten:
X=[]
Y=[]
ymax = []
ymin = []
xi = 0

yerr = zeros((2,len(plot_means)))
for y in plot_means:
    X.append(xi)
    Y.append(mean(y))
    yerr[0,xi] = mean(y)-min(y)
    yerr[1,xi] = max(y)-mean(y)
    xi += 1
plt.errorbar(X, Y, yerr = yerr) #
plt.show()

"""




"""
import numpy as np
import matplotlib.pyplot as plt



f = open('alpha.txt', 'r')
lines = f.readlines()
f.close()

alphas = []
for line in lines:
    alphas.append(float(line.split()[0]))

N = int(np.log2(len(alphas)))
means = []
for i in range(N):
    mean = sum(alphas)/len(alphas)
    means.append(mean)
    len_alphas = len(alphas)
    alphas_new = []
    for i in range(len_alphas//2):
        xi = 0.5*(alphas[2*i-2]+alphas[2*i])
        alphas_new.append(xi)
    alphas = alphas_new

plt.plot(means, '-o')
#plt.ylim([0.4978, 0.498])
plt.show()





"""


"""
import numpy as np
import matplotlib.pyplot as plt
from statistics import mean


f = open('alpha.txt', 'r')
lines = f.readlines()
f.close()

alphas = []
for line in lines:
    alphas.append(float(line.split()[0]))

blocks = []
block_size = 10
n_blocks = int(len(alphas)/block_size)
for i in range(n_blocks):
    start_index = i*block_size
    end_index = (i+1)*block_size
    blocks.append(alphas[start_index:end_index])


for i in range(len(blocks)):
    plt.plot(i, mean(blocks[i]), 'o')
plt.show()
"""
